// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PrimitiveArrayEncoder is an autogenerated mock type for the PrimitiveArrayEncoder type
type PrimitiveArrayEncoder struct {
	mock.Mock
}

// AppendBool provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendBool(_a0 bool) {
	_m.Called(_a0)
}

// AppendByteString provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendByteString(_a0 []byte) {
	_m.Called(_a0)
}

// AppendComplex128 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendComplex128(_a0 complex128) {
	_m.Called(_a0)
}

// AppendComplex64 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendComplex64(_a0 complex64) {
	_m.Called(_a0)
}

// AppendFloat32 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendFloat32(_a0 float32) {
	_m.Called(_a0)
}

// AppendFloat64 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendFloat64(_a0 float64) {
	_m.Called(_a0)
}

// AppendInt provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendInt(_a0 int) {
	_m.Called(_a0)
}

// AppendInt16 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendInt16(_a0 int16) {
	_m.Called(_a0)
}

// AppendInt32 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendInt32(_a0 int32) {
	_m.Called(_a0)
}

// AppendInt64 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendInt64(_a0 int64) {
	_m.Called(_a0)
}

// AppendInt8 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendInt8(_a0 int8) {
	_m.Called(_a0)
}

// AppendString provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendString(_a0 string) {
	_m.Called(_a0)
}

// AppendUint provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendUint(_a0 uint) {
	_m.Called(_a0)
}

// AppendUint16 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendUint16(_a0 uint16) {
	_m.Called(_a0)
}

// AppendUint32 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendUint32(_a0 uint32) {
	_m.Called(_a0)
}

// AppendUint64 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendUint64(_a0 uint64) {
	_m.Called(_a0)
}

// AppendUint8 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendUint8(_a0 uint8) {
	_m.Called(_a0)
}

// AppendUintptr provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendUintptr(_a0 uintptr) {
	_m.Called(_a0)
}

// NewPrimitiveArrayEncoder creates a new instance of PrimitiveArrayEncoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPrimitiveArrayEncoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *PrimitiveArrayEncoder {
	mock := &PrimitiveArrayEncoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
